The ``2-matrix_divided`` module
===============================

Using ``matrix_divided``
--------------------

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

	>>> 0 < len(__import__("2-matrix_divided").__doc__)
	True

	>>> 0 < len(__import__("2-matrix_divided").matrix_divided.__doc__)
	True

	>>> matrix = [     # doctest: +ELLIPSIS
	...	[1, 2, 3],
	...	[4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, 3)) # doctest: +NORMALIZE_WHITESPACE
	[[0.33, 0.67, 1.0],
	 [1.33, 1.67, 2.0]]

	>>> print(matrix) # doctest: +NORMALIZE_WHITESPACE
	[[1, 2, 3],
	 [4, 5, 6]]

	>>> print(matrix_divided(matrix, float('inf'))) # doctest: +NORMALIZE_WHITESPACE
	[[0.0, 0.0, 0.0],
	 [0.0, 0.0, 0.0]]

	>>> matrix_divided(matrix)
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

	>>> matrix_divided()
	Traceback (most recent call last):
		...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

	>>> matrix_divided(None, 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([1,2,3], 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided(matrix, None)
	Traceback (most recent call last):
		...
	TypeError: div must be a number

	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
		...
	ZeroDivisionError: division by zero

	>>> matrix = [     # doctest: +ELLIPSIS
	...	[1, 3],
	...	[4, 5, 6]
	... ]

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

	>>> matrix = [     # doctest: +ELLIPSIS
	...	[1, None, 3],
	...	[4,    5, 6]
	... ]

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
